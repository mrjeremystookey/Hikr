package r.stookey.hikr

import android.arch.lifecycle.MutableLiveData
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.pawegio.kandroid.d
import r.stookey.hikr.db.dao.PostDAO
import r.stookey.hikr.db.dao.UserDAO
import r.stookey.hikr.db.entity.PostEntity
import r.stookey.hikr.di.Injector


class Repo {

    private val TAG = "REPO"

    private val mUserDAO: UserDAO
    private val mPostDAO: PostDAO
    private val firestoreDB: FirebaseFirestore

    init {
        mUserDAO = Injector.get().userDAO
        mPostDAO = Injector.get().postDAO
        firestoreDB = Injector.get().firestoreDatabase
    }

    private lateinit var mList: List<PostEntity>
    private lateinit var mUID: String
    private lateinit var mPost: PostEntity


    /*Public funtion to grab List of Post objects from either local cache, Room or network storage, Firebase*/
    fun getAllPostsByUserID(uid: String): MutableLiveData<List<PostEntity>> {
        /*mUID = uid
        if (checkRoomForCache().value !== null)
            return checkRoomForCache()
        else
            return getAllPostsByUserIDFromFireStore()*/
        val liveDataList = MutableLiveData<List<PostEntity>>()
        liveDataList.value = getPostsByUserID(uid)
        return liveDataList
    }

    private fun getPostsByUserID(uid: String): List<PostEntity> {
        val listOfPosts = mUserDAO.getUserPostsByID(uid)
        d { listOfPosts.toString() }
        return listOfPosts
    }


    /*Checks Room Database for local cache of List of Posts
      if true sets LiveData value and returns
    */
    private fun checkRoomForCache(): MutableLiveData<List<PostEntity>> {
        val mMutableLiveData = MutableLiveData<List<PostEntity>>()
        Log.d(TAG, mUserDAO.getUserPostsByID(mUID).toString())
        if (!mUserDAO.getUserPostsByID(mUID).isEmpty()) {
            mList = mUserDAO.getUserPostsByID(mUID)
            mMutableLiveData.value = mList
        }
        return mMutableLiveData
    }

    /*
    Sets the mListLiveData to the List of Post objects returned from FireStore
    */
    private fun getAllPostsByUserIDFromFireStore(): MutableLiveData<List<PostEntity>> {
        val collectionReference = firestoreDB.collection("Messages")
        val query: Query = collectionReference.whereEqualTo("created_by", mUID)
        val mMutableLiveData = MutableLiveData<List<PostEntity>>()

        //fun level property for holding the values returned from
        //var tmpPost = Post()
        query.get().addOnSuccessListener {
            if (!it.isEmpty) {
                //Gets List of Post Objects returned by Firestore
                val list = it.toObjects(PostEntity::class.java)
                cacheAllPostsToRoom(list)
                mMutableLiveData.value = list
            } else {
                Log.d(TAG, "Unable to create tmpPost, no data found in FireStore")
            }
        }.addOnFailureListener {
            Log.d(TAG, "unable to reach the FireStore Database")
        }
        return mMutableLiveData
    }

    /*Caches the list of the User's to the Room Database
    * Is called once the list of Posts is obtained from the Firestore Database
    * */
    private fun cacheAllPostsToRoom(list: List<PostEntity>) {
        mUserDAO.updateListOfUserPosts(list)
    }




    /*
    gets Post object from the PostViewModel
    */
    fun addPostFromViewModel(post: PostEntity) {
        mPost = post
        if(post != null)
            addPostToRoomDatabase(mPost)
    }

    //Called as User updates Post and when Post is put into background
    private fun addPostToRoomDatabase(mPost: PostEntity) {
        //TODO Should be completed in another thread
        mPostDAO.addPostToRoom(mPost)
        //TODO Retrieve the PostID from the DAO when it is uploaded
        //TODO if Room data successfully syncs, add data to FireStore
        //The PostID will be generated by the Room database which will then be written into the Firestore Database
        syncPostToFireStore(mPost)
    }

    /*Called once the Post is synced to the Room Database
    uploads the Post to the Firestore Database*/
    private fun syncPostToFireStore(post: PostEntity) {
        firestoreDB.collection("Messages")
                //Sets Document Title to the PostID
                .document(post.postID.toString())
                .set(post)
                //Once Post is synced to the FireStore
                .addOnCompleteListener {

                }.addOnCompleteListener {

                }
    }

}